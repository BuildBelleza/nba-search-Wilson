"use strict";

module.exports = calculatePurchaseOptions;
function updateTotal(option) {
  option.total = _(option.pizzas).map("diameter").map(function (d) {
    return d / 2;
  }).map(function (r) {
    return r * r;
  }).map(function (r2) {
    return r2 * Math.PI;
  }).reduce(function (sum, area) {
    return area + sum;
  });
}

function addPizza(totalSize, pizzas, option, options, index) {
  index = index || 0;
  if (option.total > totalSize) {
    options.push(option);
  } else {
    for (var i = index; i < pizzas.length; ++i) {
      var newOp = { pizzas: _.clone(option.pizzas) };
      newOp.pizzas.push(pizzas[i]);
      updateTotal(newOp);
      addPizza(totalSize, pizzas, newOp, options, i);
    }
  }
  return options;
}

function calculatePurchaseOptions(eaters, pizzas, servingSize, sortBy) {
  var pizzas = _.sortBy(_.cloneDeep(pizzas), "diameter").reverse(),
      numServings = _(eaters).map("servings").reduce(function (sum, num) {
    return sum + num;
  }) || 0,
      totalSize = numServings * servingSize;

  return _(addPizza(totalSize, pizzas, { pizzas: [], total: 0 }, [])).tap(function (options) {
    return console.log("Found " + options.length + " options");
  }).forEach(function (option) {
    option.cost = _(option.pizzas).map("cost").reduce(function (sum, cost) {
      return sum + cost;
    });
    option.ratio = option.cost / option.total;
  }).sortBy("ratio").forEach(function (option, index) {
    return option.rank = index + 1;
  }).sortBy("total").forEach(function (option, index) {
    return option.rank += index;
  }).sortBy(sortBy).take(10).sortBy("total").tap(function (options) {
    return options.length && (options[options.length - 1].mostPizza = true);
  }).sortBy("ratio").tap(function (options) {
    return options.length && (options[0].bestDeal = true);
  }).sortBy("cost").tap(function (options) {
    return options.length && (options[0].cheapest = true);
  }).sortBy(sortBy).value();
}
